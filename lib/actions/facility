: '
: NAME: facility
: SYNOPSIS: Manage stack facilities
: VERSION: 1.0.0
: '
################################################################################
# (c) Copyright 2007-2012 Alces Software Ltd & Stephen F Norledge.             #
#                                                                              #
# Symphony - Operating System Content Deployment Framework                     #
#                                                                              #
# This file/package is part of Symphony                                        #
#                                                                              #
# Symphony is free software: you can redistribute it and/or modify it under    #
# the terms of the GNU Affero General Public License as published by the Free  #
# Software Foundation, either version 3 of the License, or (at your option)    #
# any later version.                                                           #
#                                                                              #
# Symphony is distributed in the hope that it will be useful, but WITHOUT      #
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or        #
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License #
# for more details.                                                            #
#                                                                              #
# You should have received a copy of the GNU Affero General Public License     #
# along with Symphony.  If not, see <http://www.gnu.org/licenses/>.            #
#                                                                              #
# For more information on the Symphony Toolkit, please visit:                  #
# https://github.com/alces-software/symphony                                       #
#                                                                              #
################################################################################
action=$1
shift
us=`basename $0`

case $action in
    install|instal|insta|inst|ins|in|i)
	package=$1
	shift
	if [ "$package" = "--local" ]; then
	    package=$1
	    shift
	    alces_LOCAL_FACILITY="$1"
	    shift
	    if [ ! -d "$alces_LOCAL_FACILITY" ]; then
		echo "Usage: $alces_BINNAME $us install --local <name> <path>"
		echo "Invalid local facility path specified."
		echo ""
		exit 1
	    fi
	else
	    alces_REMOTE_FACILITY="$1"
	    shift
	    if [ -z "$alces_REMOTE_FACILITY" ]; then
		echo "Usage: $alces_BINNAME $us install <name> <git URL>"
		echo "Invalid remote facility path specified."
		echo ""
		exit 1
	    fi
	fi

	alces_PATH="$(cd $alces_COREBASE/.. && pwd)"
	alces_SRC_PATH="$alces_PATH/var/cache/clusterware/src"
	alces_ARCHIVES_PATH="$alces_PATH/var/cache/clusterware/archives"
	export alces_PATH alces_SRC_PATH alces_ARCHIVES_PATH

        # 1. download package tarball
	
	cat <<EOF
[33m
===============================================================================
 DOWNLOADING SOURCE
===============================================================================
[0m
EOF

	if [ "$alces_LOCAL_FACILITY" ]; then
	    cp -r "$alces_LOCAL_FACILITY" "${alces_SRC_PATH}/${package}"
	    cd "$alces_SRC_PATH/${package}"
	    git remote rm origin
	    git remote add origin "$alces_LOCAL_FACILITY"

	    if [ ! -f "$alces_SRC_PATH/${package}/scripts/install" ]; then
		echo "Unable to perform local installation of '${package}'; can't find $alces_SRC_PATH/${package}/scripts/install, aborting."
		exit 1
	    fi
	elif [ "$alces_REMOTE_FACILITY" ]; then
	    git clone "$alces_REMOTE_FACILITY" "${alces_SRC_PATH}/${package}"
	    cd "$alces_SRC_PATH/${package}"
	    if [ -f "scripts/fetch_archives.sh" ]; then
		sh scripts/fetch_archives.sh
	    fi
	    if [ ! -f "$alces_SRC_PATH/${package}/scripts/install" ]; then
		echo "Unable to perform remote installation of '${package}'; can't find $alces_SRC_PATH/${package}/scripts/install, aborting."
		exit 1
	    fi
	fi

	cat <<EOF
[33m
===============================================================================
 BOOTSTRAPPING INSTALLER
===============================================================================
[0m
EOF

	chmod +x ./scripts/install
	./scripts/install
	;;
    update|updat|upda|upd|up|u)
	package=$1
	shift
	if [ -z "$package" ]; then
	    us=`basename $0`
	    echo "Usage: $alces_BINNAME $us update <name>"
	    echo "No facility name specified."
	    echo ""
	    exit 1
	fi

	alces_PATH="$(cd $alces_COREBASE/.. && pwd)"
	alces_SRC_PATH="$alces_PATH/var/cache/clusterware/src"
	export alces_PATH alces_SRC_PATH

	if [ ! -d "$alces_SRC_PATH/${package}" ]; then
	    echo "No such facility: ${package}"
	    exit 1
	else
	    cd "$alces_SRC_PATH/${package}"
	    if [ ! -d ".git" ]; then
		echo "Facility not updateable: ${package}"
		exit 1
	    fi
	    git pull origin master
	    if [ -f "scripts/update" ]; then
		if [ "$package" = "$alces_SUITENAME" ]; then
	            # we're updating internals, probably including
	            # ourselves, so we need to exec rather than call
	            # to prevent the update of this script messing
	            # things up.
		    exec scripts/update
		else
		    scripts/update
		fi
	    fi

	    echo "Facility '${package}' has been updated."
	fi
	;;
    help|hel|he|h|--help|-h)
	display_help $0
	;;
    *)
	us=`basename $0`
	echo "$alces_BINNAME $us: '$action' is not a known command. See '$alces_BINNAME $us --help'."
	;;
esac
